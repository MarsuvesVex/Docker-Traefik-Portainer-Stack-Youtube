version: '3.3'
########################### NETWORKS
# Create proxy network
# $ docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 proxy
networks:
  proxy:
    external:
      name: proxy
  default:
    driver: bridge
########################### SERVICES
services:
  step-ca:
    image: smallstep/step-ca
    environment:
      DOCKER_STEPCA_INIT_NAME: Smallstep
      DOCKER_STEPCA_INIT_DNS_NAMES: ca.dev.local,dev.local,local
      DOCKER_STEPCA_INIT_PROVISIONER_NAME: admin
      DOCKER_STEPCA_INIT_PASSWORD: pass123
    networks:
      proxy:
        aliases:
          - "ca.dev.local"
    ports:
      - 9000:9000
    volumes:
      - ./data/step-ca:/home/step
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ca-web.entrypoints=http"
      - "traefik.http.routers.ca-web.rule=Host(`ca.dev.local`)"

      # - "traefik.http.middlewares.ca-redirect.redirectscheme.scheme=https"
      # - "traefik.http.routers.ca-web.middlewares=ca-redirect"

      # - "traefik.http.routers.ca-websecure.middlewares=ca-redirect@file"
      # - "traefik.http.routers.ca-websecure.middlewares=chain-authelia@file"

      - "traefik.http.routers.ca-websecure.entrypoints=https"
      - "traefik.http.routers.ca-websecure.rule=Host(`ca.dev.local`)"
      - "traefik.http.services.ca.loadbalancer.server.port=9000"
      - "traefik.http.routers.ca-websecure.tls=true"
      - "traefik.http.routers.ca-websecure.tls.certresolver=myresolver"
####DB for Authelia
  mariadb:
    container_name: authelia_mariadb
    image: mariadb:$MARIAVERSION
    hostname: authelia_mariadb
    restart: always
    networks:
      - proxy
    volumes:
      - ./docker/mariadb/config:/config
      - ./docker/mariadb/mysql:/var/lib/mysql
    expose:
      - 3306
    environment:
      - MYSQL_ROOT_PASSWORD=$AUTHELIA_MYSQL_ROOT_PASSWORD
      - MYSQL_USER=$AUTHELIA_MYSQL_USER
      - MYSQL_DATABASE=$AUTHELIA_MYSQL_DATABASE
      - MYSQL_PASSWORD=$AUTHELIA_MYSQL_PASSWORD
    labels:
      - traefik.enable=false
####GUI managament for mariadb
  phpmyadmin:
    container_name: authelia_phpmyadmin
    image: phpmyadmin/phpmyadmin:$PHPMYADMINVERSION
    depends_on:
      - mariadb
    restart: always
    expose:
      - 80
    networks:
      - proxy
    environment:
      PMA_HOSTS: authelia_mariadb
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.phpmyadmin-http-rtr.rule=Host(`phpmyadmin.$DOMAINNAME`)
      - traefik.http.routers.phpmyadmin-http-rtr.entrypoints=http
      - traefik.http.routers.phpmyadmin-https-rtr.rule=Host(`phpmyadmin.$DOMAINNAME`)
      - traefik.http.routers.phpmyadmin-https-rtr.entrypoints=https
      - traefik.http.routers.phpmyadmin-https-rtr.tls=true
      - traefik.http.routers.phpmyadmin-https-rtr.tls.certresolver=myresolver
      ## Middlewares Rules
      - traefik.http.routers.phpmyadmin-http-rtr.middlewares=middlewares-https-redirect@file
      - traefik.http.routers.phpmyadmin-https-rtr.middlewares=chain-authelia@file
####redis Cache for authelia
  redis:
    container_name: authelia_redis
    image: redis:alpine
    restart: always
    volumes:
      - ./docker/redis:/data
    networks:
      - proxy
    expose:
      - 6379
    environment:
      - TZ=$TZ
    labels:
      - traefik.enable=false
####Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    image: authelia/authelia:$AUTHELIAVERSION
    restart: always
    depends_on:
      - mariadb
      - phpmyadmin
      - redis
    ports:
      - 9091:9091
    expose:
      - 9091
    environment:
      - TZ=$TZ
    volumes:
      - ./docker/authelia/authelia:/var/lib/authelia
      - ./docker/authelia/configuration.yml:/etc/authelia/configuration.yml:ro
      - ./docker/authelia/users_database.yml:/etc/authelia/users_database.yml
    networks:
      - proxy
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.authelia.rule=Host(`auth.$DOMAINNAME`)
      - traefik.http.routers.authelia.entrypoints=http,https
      - traefik.http.routers.authelia.tls=true
      - traefik.http.routers.authelia.tls.certresolver=myresolver
####Traefik is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy
  traefik:
    image: traefik:v2.4
    container_name: traefik_proxy
    depends_on:
      - step-ca
    networks:
      proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traf-external"
      - "--providers.file.watch=true"
      - "--accesslog=false"
      - "--log=true"
      - "--log.level=DEBUG"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesResolvers.myresolver.acme.tlsChallenge=true"
      - "--certificatesResolvers.myresolver.acme.email=admin"
      - "--certificatesResolvers.myresolver.acme.storage=/etc/acme/acme.json"
      - "--certificatesresolvers.myresolver.acme.caserver=https://ca.dev.local:9000/acme/acme/directory"
      - "--certificatesResolvers.myresolver.acme.httpChallenge=true"
      - "--certificatesResolvers.myresolver.acme.httpChallenge.entryPoint=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    # volumes:
    #   - /var/run/docker.sock:/var/run/docker.sock
    #   - ./data/traefik/acme:/etc/acme
    #   - ./data/step-ca/certs/root_ca.crt:/usr/local/share/ca-certificates/my_root_ca.crt
    #   - ./site_home_local.crt:/certs/wild_dev_local.crt:ro
    #   - ./site_home_local.key:/certs/wild_dev_local.key:ro
    #   - ./ca.crt:/certs/ca.crt
    #   - ./traefik_config/traefik.yml:/traefik.yml:ro
    #   - ./traefik_config/log/access.log:/log/access.log
    #   - ./traefik_config/acme/acme.json:/etc/acme/acme.json
    #   - ./traefik_config/configurations:/configurations
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Add folder with STATIC configuration yml
      - ./traefik_config/traefik.yml:/traefik.yml:ro
      - ./traefik_config/acme/acme.json:/acme.json
      - ./traefik_config/log/access.log:/log/access.log
      # Add folder with DYNAMIC configuration yml
      - ./traefik_config/configurations:/configurations
    environment:
      LEGO_CA_CERTIFICATES: "/usr/local/share/ca-certificates/my_root_ca.crt"
      LEGO_CA_SERVER_NAME: "ca.dev.local"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik0.entrypoints=http"
      - "traefik.http.routers.traefik0.rule=Host(`traefik.dev.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

      - "traefik.http.middlewares.traefik-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik0.middlewares=traefik-redirect"

      - "traefik.http.routers.traefik1.entrypoints=https"
      - "traefik.http.routers.traefik1.rule=Host(`traefik.dev.local`)"
      - "traefik.http.routers.traefik1.tls=true"
      - "traefik.http.routers.traefik1.tls.certresolver=myresolver"
####Portainer is a lightweight management UI which allows you to easily manage your different Docker
  portainer:
    container_name: portainer
    image: portainer/portainer:$PORTAINERVERSION
    restart: always
    depends_on:
      - traefik
    command: -H unix:///var/run/docker.sock
    expose:
      - 9000
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/portainer/data:/data
    environment:
      - TZ=$TZ
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.portainer-http-rtr.rule=Host(`portainer.$DOMAINNAME`)
      - traefik.http.routers.portainer-http-rtr.entrypoints=http
      - traefik.http.routers.portainer-https-rtr.rule=Host(`portainer.$DOMAINNAME`)
      - traefik.http.routers.portainer-https-rtr.entrypoints=https
      # - traefik.http.routers.portainer-https-rtr.tls=true
      # - traefik.http.routers.portainer-https-rtr.tls.certresolver=myresolver
      ## Middlewares Rules
      # - traefik.http.routers.portainer-http-rtr.middlewares=middlewares-https-redirect@file
      # - traefik.http.routers.portainer-https-rtr.middlewares=chain-authelia@file
####Dozzle is a simple, a web based interface to monitor your Docker container logs
  dozzle:
    container_name: dozzle_logs
    image: amir20/dozzle:$DOZZLEVERSION
    restart: always
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    labels:
      - traefik.enable=false

  mailhog:
    container_name: mailhog
    restart: always
    image: mailhog/mailhog:latest
    ports:
      - 1025:1025 # smtp server
      - 8025:8025
    networks:
      proxy:
        ipv4_address: 192.168.90.252 # You can specify a static IP
    labels:
      - traefik.enable=true
      - traefik.http.routers.mailhog.rule=Host(`mailhog.localhost`)
      - "traefik.http.routers.mailhog.entrypoints=http"
      - traefik.http.services.mailhog.loadbalancer.server.port=8025
      - "traefik.http.routers.mailhog.tls=true"
####whoami test in front page
  whoami:
    container_name: frontpage
    image: containous/whoami
    restart: always
    depends_on:
      - traefik
    expose:
      - 80
    networks:
      - proxy
    labels:
      - traefik.enable=true
      ## Routers Rules
      - traefik.http.routers.whoami-http-rtr.rule=Host(`$DOMAINNAME`)
      - traefik.http.routers.whoami-http-rtr.entrypoints=http
      - traefik.http.routers.whoami-https-rtr.rule=Host(`$DOMAINNAME`)
      - traefik.http.routers.whoami-https-rtr.entrypoints=https
      - traefik.http.routers.whoami-https-rtr.tls=true
      - traefik.http.routers.whoami-https-rtr.tls.certresolver=myresolver
      ## Middlewares Rules
      - traefik.http.routers.whoami-http-rtr.middlewares=middlewares-https-redirect@file
      # - traefik.http.routers.whoami-https-rtr.middlewares=chain-authelia@file
